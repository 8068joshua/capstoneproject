# -*- coding: utf-8 -*-
"""Important.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZxTpLfVfMD0fFW0-qDUyp6a8ZhJ-yCHH
"""

# Commented out IPython magic to ensure Python compatibility.
# 모델 만들기와 출력 폴더 만들기 
# %mkdir /content/exported_files 
INFO_FILE = "/content/exported_files/info.txt"
!touch $INFO_FILE
!echo "YOLOv5 version:" $VERSION >> $INFO_FILE

# YOLOv5 위치 클론화
# %cd /content
!echo "git clone https://github.com/ultralytics/yolov5" # 스크립트 체크
!git clone https://github.com/ultralytics/yolov5  # 클론
# %cd /content/yolov5
!git log -n 1 # 최근 커밋 확인하기

# %cd /content/yolov5

!pip install -qr requirements.txt  #기본설정
!pip install -q roboflow
!pip install onnx
!pip install torchvision

import torch

from IPython.display import Image, clear_output  # 이미지 시각화

# 출력 초기화
print('Setup complete. Using torch %s %s' % (torch.__version__, torch.cuda.get_device_properties(0) if torch.cuda.is_available() else 'CPU'))

# %cd /content/yolov5
# 미리 저장된 이미지 코드 사용하기
from roboflow import Roboflow
rf = Roboflow(api_key="oBsY5hFzVYgIUycM9wqA")
project = rf.workspace("scilab").project("ours-fall-detection")
dataset = project.version(3).download("yolov5")

# Commented out IPython magic to ensure Python compatibility.
# %cat {dataset.location}/data.yaml
EPOCHS = 15
IMG_SIZE = 416
MODEL = "yolov5l.pt"
MODEL_CONF = "/content/yolov5/models/yolov5l.yaml"

!echo "Epoch:" $EPOCHS >> $INFO_FILE
!echo "Image size:" $IMG_SIZE >> $INFO_FILE
!echo "Base model:" $MODEL >> $INFO_FILE
!echo "Base model config file:" $MODEL_CONF >> $INFO_FILE

#모델 설명
# %cat $MODEL_CONF

# 커스터 YAML 코드 불러오기
# %cp $MODEL_CONF /content/yolov5/models/custom_model.yaml

# YAML 클래스 코드 지정
import yaml
with open(dataset.location + "/data.yaml", 'r') as stream:
    num_classes = str(yaml.safe_load(stream)['nc'])


with open('/content/yolov5/models/custom_model.yaml' , 'r') as f:
    
    #read file
    file_source = f.read()
    
    #replace 'nc:' with the num_classes in the file
    new_string = 'nc: '+str(num_classes)+' #'
    replace_string = file_source.replace('nc:', new_string)
    
with open('/content/yolov5/models/custom_model.yaml', 'w') as f:
    #save output
    f.write(replace_string)

# %cat /content/yolov5/models/custom_model.yaml

# Commented out IPython magic to ensure Python compatibility.
#"exported_files" 폴더에 config 파일 복사
# %cp /content/yolov5/models/custom_model.yaml /content/exported_files
# %cp {dataset.location}/data.yaml /content/exported_files

# Commented out IPython magic to ensure Python compatibility.
# %%time
# %cd /content/yolov5/
# !python train.py --img $IMG_SIZE --batch 16 --epochs $EPOCHS --data {dataset.location}/data.yaml --cfg ./models/custom_model.yaml --weights $MODEL --name yolov5_results  --cache
# 
# # copy the best model to the "exported_files" folder
# %cp /content/yolov5/runs/train/yolov5_results/weights/best.pt /content/exported_files

# Commented out IPython magic to ensure Python compatibility.
# 텐서보드에 결과값 지정 및 "runs"에 
# %load_ext tensorboard
# %tensorboard --logdir runs

!python export.py --weights models/yolov5l.pt --include onnx
import cv2
print("Python:")
!python --version
print("OpenCV:", cv2.__version__)
print("Tensorboard:", tensorboard.__version__)

#라즈베리 파이 완전 업데이트
sudo apt-get update
sudo apt-get dist-upgrade

#텐서플로 설치
pip3 install tensorflow
sudo apt-get install libatlas-base-dev
sudo pip3 install pillow lxml jupyter matplotlib cython
sudo apt-get install python-tk

#오픈 CV설치
sudo apt-get install libjpeg-dev libtiff5-dev libjasper-dev libpng12-dev
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
sudo apt-get install libxvidcore-dev libx264-dev
sudo apt-get install qt4-dev-tools libatlas-base-dev
sudo pip3 install opencv-python

#텐서플로 디렉토리 만들기
mkdir tensorflow1
cd tensorflow1
git clone --depth 1 https://github.com/tensorflow/models.git
sudo nano ~/.bashrc
export PYTHONPATH=$PYTHONPATH:/home/pi/tensorflow1/models/research:/home/pi/tensorflow1/models/research/slim

#Save and Exit
#재시작시 export PYTHONPATH으로 설정되어 있는지 확인
cd /home/pi/tensorflow1/models/research
protoc object_detection/protos/*.proto --python_out=.
cd /home/pi/tensorflow1/models/research/object_detection

#Tensorflow -> YOLOV5
git clone https://github.com/8068joshua/capstoneproject/algorithm.ipynb
git clone https://github.com/jahongir7174/YOLOv5-tf.git
python main.py --train
python main.py --test